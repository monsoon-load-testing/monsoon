{"version":3,"sources":["components/ListTest.js","lib/ApiClient.js","components/ListTestTable.js","components/LegendButton.js","components/Legend.js","components/MainChart.js","components/WindowChart.js","logos/svgs/refresh.svg","components/ChartContainer.js","components/StatisticRow.js","components/Statistics.js","components/StepButton.js","components/TestPage.js","logos/svgs/color/logo.svg","components/Header.js","App.js","index.js"],"names":["ListTest","props","date","Date","Number","testDate","dateString","toDateString","dateTime","getHours","getMinutes","getSeconds","url","clickHandler","onClick","className","testName","axios","require","logError","errorResponse","response","data","error","console","BASE_URL","unwrapData","defaults","headers","common","apiClient","getListOfSteps","tableName","callback","get","then","catch","getTestDataset","getTestStats","getListOfTables","ListTestTable","useState","tables","setTables","useEffect","tablePromise","Promise","resolve","navigate","useNavigate","e","preventDefault","target","closest","dataset","scope","JSON","stringify","sort","a","b","map","table","keyName","LegendButton","checked","activeColor","color","Legend","active","setActive","activeColors","activeHandler","metric","isActiveResponseTime","isActiveConcurrentUsers","isActiveTransactionRate","isActivePassRatio","responseTime","concurrentUsers","transactionRate","passRatio","MainChart","maxResponseTime","maxConcurrentUsers","maxTransactionRate","maxPassRatio","zoomDomain","setZoomDomain","colors","VictoryZoomVoronoiContainer","createContainer","theme","VictoryTheme","material","singleQuadrantDomainPadding","x","domainPadding","padding","left","right","top","bottom","width","height","scale","domain","y","containerComponent","allowZoom","allowPan","voronoiBlacklist","voronoiDimension","zoomDimension","onZoomDomainChange","labels","datum","Math","round","value","unit","labelComponent","centerOffset","flyoutStyle","stroke","strokeWidth","fill","flyoutWidth","style","grid","axis","ticks","tickLabels","dependentAxis","tickValues","tickFormat","tickValue","axisLabelComponent","angle","fontSize","label","fontWeight","offsetX","name","size","strokeLinecap","WindowChart","brushDimension","brushDomain","onBrushDomainChange","ChartContainer","refreshDataHandler","max","time","length","startTime","endTime","chartColors","src","logo","alt","StatisticRow","metricName","metricValue","metricUnit","Statistics","p95","average","min","rel","href","StepButton","stepName","index","borderRight","lastStepIdx","formatData","rawData","Object","values","forEach","step","offset","getTimezoneOffset","TestPage","useParams","allSteps","setAllSteps","allStats","setAllStats","allData","setAllData","currentStep","setCurrentStep","currentStats","setCurrentStats","currentData","setCurrentData","stepsPromise","statsPromise","datasetPromise","all","step1","button","childNodes","child","classList","contains","remove","add","textContent","Header","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.802ed896.chunk.js","sourcesContent":["const ListTest = (props) => {\n  const date = new Date(Number(props.testDate, 10));\n  const dateString = date.toDateString();\n  const dateTime = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  const url = props.url;\n\n  const clickHandler = props.clickHandler;\n  return (\n    <tr data-url={url} onClick={clickHandler} className=\"cursor-pointer \">\n      <td className=\"px-6 py-4 whitespace-nowrap\">\n        <div className=\"items-center\">\n          <div className=\"ml-4\">\n            <div className=\"text-xl text-center font-medium text-gray-900 font-openSans\">\n              {props.testName}\n            </div>\n          </div>\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap\">\n        <div className=\"text-xl text-center text-gray-900 font-openSans\">\n          {dateString}: {dateTime}\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nexport default ListTest;\n","const axios = require(\"axios\");\n\nfunction logError(errorResponse) {\n  const response = errorResponse.response;\n\n  if (response && response.data && response.data.error) {\n    console.error(`HTTP Error: ${response.data.error}`);\n  } else {\n    console.error(\"Error: \", errorResponse);\n  }\n}\nconst BASE_URL = \"/api/tests\";\n\nfunction unwrapData(response) {\n  return response.data;\n}\n\naxios.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.headers.common[\"Accept\"] = \"application/json\";\n\nconst apiClient = {\n  getListOfSteps(tableName, callback) {\n    return axios\n      .get(`${BASE_URL}/${tableName}/steps`)\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n\n  getTestDataset(tableName, callback) {\n    return axios\n      .get(`${BASE_URL}/${tableName}`)\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n\n  getTestStats(tableName, callback) {\n    return axios\n      .get(`${BASE_URL}/${tableName}/stats`)\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n  \n  getListOfTables(tableName, callback) {\n    return axios\n      .get(`${BASE_URL}`)\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n  \n};\n\n// IIFE to test shape of test from db\n// (async () => {\n//   const db = \"downpour-test-1637014373298\"\n//   const steps = await apiClient.getListOfSteps(db);\n//   console.log(\"Steps\", steps);\n//   const dataset = await apiClient.getTestDataset(db);\n//   console.log(\"Dataset\", dataset);\n//   const testStats = await apiClient.getTestStats(db);\n//   console.log(\"Stats\", testStats);\n// })();\n\nexport default apiClient;\n","import ListTest from \"./ListTest\";\nimport apiClient from \"../lib/ApiClient\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\n\nconst ListTestTable = () => {\n  const [tables, setTables] = useState([]);\n\n  useEffect(() => {\n    const tablePromise = apiClient.getListOfTables();\n    Promise.resolve(tablePromise)\n      .then((data) => {\n        const temp = data;\n        return temp;\n      })\n      .then((data) => {\n        setTables(data);\n      });\n  }, [setTables]);\n\n  const navigate = useNavigate();\n  const clickHandler = (e) => {\n    e.preventDefault();\n    navigate(`/tests/${e.target.closest(\"tr\").dataset.url}/`);\n  };\n\n  return (\n    <div className=\"flex flex-col max-w-full\">\n      <div className=\"w-full bg-white relative flex overflow-hidden border-2 rounded-lg border-mediumPurple h-800\">\n        <div className=\"py-2 align-middle inline-block min-w-full\">\n          <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-center text-xl font-medium tracking-wider font-raleway\"\n                  >\n                    Test Name\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-center text-xl font-medium tracking-wider font-raleway\"\n                  >\n                    Date\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {JSON.stringify(tables) !== [] &&\n                  tables\n                    .sort((a, b) => {\n                      return a.date > b.date ? -1 : 1;\n                    })\n                    .map((table) => {\n                      let keyName = `${table.testName}-${table.date}`;\n                      return (\n                        <ListTest\n                          key={keyName}\n                          url={keyName}\n                          testName={table.testName}\n                          testDate={table.date}\n                          clickHandler={clickHandler}\n                        />\n                      );\n                    })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ListTestTable;\n","const LegendButton = ({ checked, activeColor }) => {\n  // let color = checked ? activeColor : \"bg-white\";\n  let color = checked ? activeColor : \"bg-white\";\n  return (\n    <div className=\"ml-2 w-10 flex justify-center content-center items-center\">\n      <span\n        className={`h-5 w-5 border-2 flex z-10  rounded-full transition-transform duration-300 ease-in-out border-indigo ${color}`}\n      ></span>\n    </div>\n  );\n};\n\nexport default LegendButton;\n","import LegendButton from \"./LegendButton\";\n\nconst Legend = ({ active, setActive, activeColors }) => {\n  const activeHandler = (e) => {\n    e.preventDefault();\n    const metric = e.target.closest(\"LI\").dataset.metric;\n    setActive({ ...active, [metric]: !active[metric] });\n  };\n\n  const {\n    isActiveResponseTime,\n    isActiveConcurrentUsers,\n    isActiveTransactionRate,\n    isActivePassRatio,\n  } = active;\n  return (\n    <div className=\"mt-2 inline-block w-11/12\">\n      <ul className=\"flex justify-evenly align-middle items-center\">\n        <li\n          onClick={activeHandler}\n          className=\"text-left cursor-pointer flex font-openSans\"\n          data-metric=\"isActiveResponseTime\"\n        >\n          {isActiveResponseTime ? (\n            <LegendButton\n              checked=\"on\"\n              activeColor={activeColors.responseTime}\n            />\n          ) : (\n            <LegendButton />\n          )}{\" \"}\n          Response Time\n        </li>\n        <li\n          onClick={activeHandler}\n          className=\"text-left cursor-pointer flex font-openSans\"\n          data-metric=\"isActiveConcurrentUsers\"\n        >\n          {isActiveConcurrentUsers ? (\n            <LegendButton\n              checked=\"on\"\n              activeColor={activeColors.concurrentUsers}\n            />\n          ) : (\n            <LegendButton />\n          )}{\" \"}\n          Concurrent Users\n        </li>\n        <li\n          onClick={activeHandler}\n          className=\"text-left cursor-pointer flex font-openSans\"\n          data-metric=\"isActiveTransactionRate\"\n        >\n          {isActiveTransactionRate ? (\n            <LegendButton\n              checked=\"on\"\n              activeColor={activeColors.transactionRate}\n            />\n          ) : (\n            <LegendButton />\n          )}{\" \"}\n          Transaction Rate\n        </li>\n        <li\n          onClick={activeHandler}\n          className=\"text-left cursor-pointer flex font-openSans\"\n          data-metric=\"isActivePassRatio\"\n        >\n          {isActivePassRatio ? (\n            <LegendButton checked=\"on\" activeColor={activeColors.passRatio} />\n          ) : (\n            <LegendButton />\n          )}{\" \"}\n          Pass Ratio\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Legend;\n","import {\n  // VictoryBar,\n  VictoryChart,\n  VictoryAxis,\n  VictoryTheme,\n  VictoryLine,\n  VictoryBrushContainer,\n  VictoryZoomContainer,\n  createContainer,\n  VictoryTooltip,\n  VictoryLegend,\n  VictoryLabel,\n  VictoryScatter,\n  VictoryGroup,\n} from \"victory\";\n\n// import Axes from './Axes'\n\nconst MainChart = ({\n  responseTime,\n  maxResponseTime,\n  concurrentUsers,\n  maxConcurrentUsers,\n  transactionRate,\n  maxTransactionRate,\n  passRatio,\n  maxPassRatio,\n  zoomDomain,\n  setZoomDomain,\n  active,\n  colors,\n}) => {\n  const {\n    isActiveResponseTime,\n    isActiveConcurrentUsers,\n    isActiveTransactionRate,\n    isActivePassRatio,\n  } = active;\n  const VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n  return (\n    <div className=\"pl-4 pr-6\">\n      <VictoryChart\n        key=\"Main VictoryChart\"\n        theme={VictoryTheme.material}\n        singleQuadrantDomainPadding={{ x: false }}\n        domainPadding={{ x: 60 }}\n        padding={{ left: 100, right: 100, top: 50, bottom: 30 }}\n        width={1000}\n        height={350}\n        scale={{ x: \"time\" }}\n        domain={{ y: [0, 1.1] }}\n        containerComponent={\n          <VictoryZoomVoronoiContainer\n            allowZoom={false}\n            allowPan={false}\n            voronoiBlacklist={[\"ignore1\", \"ignore2\", \"ignore3\", \"ignore4\"]}\n            voronoiDimension=\"x\"\n            zoomDimension=\"x\"\n            zoomDomain={zoomDomain}\n            onZoomDomainChange={(domain) => setZoomDomain(domain)}\n            labels={({ datum }) =>\n              `${datum.metric}: ${Math.round(datum.value)} ${datum.unit}`\n            }\n            labelComponent={\n              <VictoryTooltip\n                centerOffset={{ y: 45 }}\n                flyoutStyle={{\n                  stroke: \"black\",\n                  strokeWidth: 2,\n                  fill: \"white\",\n                  padding: 50,\n                }}\n                flyoutWidth={250}\n              />\n            }\n          />\n        }\n      >\n        <VictoryAxis\n          key=\"Response Time Axis\"\n          style={{\n            grid: { strokeWidth: 0 },\n            axis: { stroke: \"black\" },\n            ticks: { stroke: \"black\" },\n            tickLabels: { fill: \"black\" },\n          }}\n        />\n\n        {isActiveResponseTime && (\n          <VictoryAxis\n            dependentAxis\n            tickValues={[0, 0.25, 0.5, 0.75, 1]}\n            tickFormat={(tickValue) => Math.round(tickValue * maxResponseTime)}\n            axisLabelComponent={\n              <VictoryLabel\n                x={83}\n                y={50}\n                angle={0}\n                style={{\n                  fill: colors.responseTime,\n                  fontSize: 16,\n                }}\n              />\n            }\n            label={\"ms\"}\n            style={{\n              grid: { strokeWidth: 0 },\n              ticks: { padding: -5, strokeWidth: 0 },\n              axis: { stroke: \"black\" },\n              tickLabels: { fill: colors.responseTime, fontWeight: \"bold\" },\n            }}\n          />\n        )}\n\n        {isActiveConcurrentUsers && (\n          <VictoryAxis\n            key=\"Concurrent Users Axis\"\n            dependentAxis\n            tickValues={[0.25, 0.5, 0.75, 1]}\n            tickFormat={(tickValue) =>\n              Math.round(tickValue * maxConcurrentUsers)\n            }\n            axisLabelComponent={\n              <VictoryLabel\n                x={125}\n                y={50}\n                angle={0}\n                style={{ fill: colors.concurrentUsers, fontSize: 16 }}\n              />\n            }\n            label={\"users\"}\n            style={{\n              ticks: { padding: -40, strokeWidth: 0 },\n              grid: { strokeWidth: 0 },\n              axis: { stroke: \"black\" },\n              tickLabels: {\n                fill: colors.concurrentUsers,\n                fontWeight: \"bold\",\n              },\n            }}\n            // orientation={\"right\"}\n          />\n        )}\n        {isActiveTransactionRate && (\n          <VictoryAxis\n            key=\"Transaction Rate Axis\"\n            dependentAxis\n            tickValues={[0, 0.25, 0.5, 0.75, 1]}\n            tickFormat={(tickValue) =>\n              Math.round(tickValue * maxTransactionRate)\n            }\n            offsetX={900}\n            axisLabelComponent={\n              <VictoryLabel\n                x={900 + 22}\n                y={50}\n                angle={0}\n                style={{ fill: colors.transactionRate, fontSize: 16 }}\n              />\n            }\n            label={\"TPM\"}\n            style={{\n              grid: { strokeWidth: 0 },\n              ticks: { padding: -50, strokeWidth: 0 },\n              axis: { stroke: \"black\" },\n              tickLabels: { fill: colors.transactionRate, fontWeight: \"bold\" },\n            }}\n          />\n        )}\n        {isActivePassRatio && (\n          <VictoryAxis\n            key=\"Pass Ratio Axis\"\n            dependentAxis\n            tickValues={[0.25, 0.5, 0.75, 1]}\n            tickFormat={(tickValue) => Math.round(tickValue * maxPassRatio)}\n            offsetX={900}\n            axisLabelComponent={\n              <VictoryLabel\n                x={900 - 20}\n                y={50}\n                angle={0}\n                style={{ fill: colors.passRatio, fontSize: 16 }}\n              />\n            }\n            label={\"%\"}\n            style={{\n              grid: { strokeWidth: 0 },\n              ticks: { padding: 0, strokeWidth: 0 },\n              axis: { stroke: \"black\" },\n              tickLabels: { fill: colors.passRatio, fontWeight: \"bold\" },\n            }}\n          />\n        )}\n\n        {isActiveResponseTime && (\n          <VictoryLine\n            key=\"Response Time Line\"\n            name=\"ignore1\"\n            style={{\n              data: { stroke: colors.responseTime, strokeWidth: \"2.5\" },\n            }}\n            data={responseTime}\n            x={\"time\"}\n            y={(datum) => datum.value / maxResponseTime}\n          />\n        )}\n\n        {isActiveResponseTime && (\n          <VictoryScatter\n            key=\"Response Time Scatter\"\n            style={{\n              data: { fill: colors.responseTime },\n              labels: { fill: colors.responseTime, fontWeight: \"bold\" },\n            }}\n            data={responseTime}\n            x={\"time\"}\n            y={(datum) => datum.value / maxResponseTime}\n            size={({ active }) => (active ? 4 : 1)}\n          />\n        )}\n\n        {isActiveConcurrentUsers && (\n          <VictoryLine\n            key=\"Concurrent Users Line\"\n            name=\"ignore2\"\n            style={{\n              data: {\n                stroke: colors.concurrentUsers,\n                strokeWidth: \"2.5\",\n                strokeLinecap: \"round\",\n              },\n            }}\n            data={concurrentUsers}\n            x={\"time\"}\n            y={(datum) => datum.value / maxConcurrentUsers}\n          />\n        )}\n\n        {isActiveConcurrentUsers && (\n          <VictoryScatter\n            key=\"Concurrent Users Scatter\"\n            style={{\n              data: { fill: colors.concurrentUsers },\n              labels: { fill: colors.concurrentUsers, fontWeight: \"bold\" },\n            }}\n            data={concurrentUsers}\n            x={\"time\"}\n            y={(datum) => datum.value / maxConcurrentUsers}\n            size={({ active }) => (active ? 4 : 1)}\n          />\n        )}\n\n        {isActiveTransactionRate && (\n          <VictoryLine\n            key=\"Transaction Rate Line\"\n            name=\"ignore3\"\n            style={{\n              data: { stroke: colors.transactionRate, strokeWidth: \"2.5\" },\n            }}\n            data={transactionRate}\n            x={\"time\"}\n            y={(datum) => datum.value / maxTransactionRate}\n          />\n        )}\n\n        {isActiveTransactionRate && (\n          <VictoryScatter\n            key=\"Transaction Rate Scatter\"\n            style={{\n              data: { fill: colors.transactionRate },\n              labels: { fill: colors.transactionRate, fontWeight: \"bold\" },\n            }}\n            data={transactionRate}\n            x={\"time\"}\n            y={(datum) => datum.value / maxTransactionRate}\n            size={({ active }) => (active ? 4 : 1)}\n          />\n        )}\n\n        {isActivePassRatio && (\n          <VictoryLine\n            key=\"Pass Ratio Line\"\n            name=\"ignore4\"\n            style={{ data: { stroke: colors.passRatio, strokeWidth: \"2.5\" } }}\n            data={passRatio}\n            x={\"time\"}\n            y={(datum) => datum.value / maxPassRatio}\n          />\n        )}\n\n        {isActivePassRatio && (\n          <VictoryScatter\n            key=\"Pass Ratio Scatter\"\n            style={{\n              data: { fill: colors.passRatio },\n              labels: { fill: colors.passRatio, fontWeight: \"bold\" },\n            }}\n            data={passRatio}\n            x={\"time\"}\n            y={(datum) => datum.value / maxPassRatio}\n            size={({ active }) => (active ? 4 : 1)}\n          />\n        )}\n      </VictoryChart>\n    </div>\n  );\n};\n\nexport default MainChart;\n","import {\n  // VictoryBar,\n  VictoryChart,\n  VictoryAxis,\n  VictoryTheme,\n  VictoryLine,\n  VictoryBrushContainer,\n  VictoryZoomContainer,\n  createContainer,\n  VictoryTooltip,\n  VictoryLegend,\n  VictoryLabel,\n  VictoryScatter,\n} from \"victory\";\n\nconst WindowChart = ({\n  responseTime,\n  maxResponseTime,\n  concurrentUsers,\n  maxConcurrentUsers,\n  transactionRate,\n  maxTransactionRate,\n  passRatio,\n  maxPassRatio,\n  zoomDomain,\n  setZoomDomain,\n  active,\n  colors,\n}) => {\n  const {\n    isActiveResponseTime,\n    isActiveConcurrentUsers,\n    isActiveTransactionRate,\n    isActivePassRatio,\n  } = active;\n  return (\n    <>\n      <VictoryChart\n        key=\"Window VictoryChart\"\n        theme={VictoryTheme.material}\n        domainPadding={{ x: 60 }}\n        padding={{ left: 100, right: 100, top: 10, bottom: 50 }}\n        width={1000}\n        height={110}\n        scale={{ x: \"time\" }}\n        domain={{ y: [0, 1.1] }}\n        containerComponent={\n          <VictoryBrushContainer\n            brushDimension=\"x\"\n            brushDomain={zoomDomain}\n            onBrushDomainChange={(domain) =>\n              setZoomDomain({ x: domain.x, y: [0, 1.1] })\n            }\n          />\n        }\n      >\n        <VictoryAxis key=\"Window time axis\" />\n\n        {isActiveResponseTime && (\n          <VictoryLine\n            key=\"Window Response Time line\"\n            name=\"Response Time\"\n            style={{ data: { stroke: colors.responseTime } }}\n            data={responseTime}\n            x={\"time\"}\n            y={(datum) => datum.value / maxResponseTime}\n          />\n        )}\n\n        {isActiveConcurrentUsers && (\n          <VictoryLine\n            key=\"Window Concurrent Users Line\"\n            style={{ data: { stroke: colors.concurrentUsers } }}\n            data={concurrentUsers}\n            x={\"time\"}\n            y={(datum) => datum.value / maxConcurrentUsers}\n          />\n        )}\n\n        {isActiveTransactionRate && (\n          <VictoryLine\n            key=\"Window Transaction Rate Line\"\n            style={{ data: { stroke: colors.transactionRate } }}\n            data={transactionRate}\n            x={\"time\"}\n            y={(datum) => datum.value / maxTransactionRate}\n          />\n        )}\n\n        {isActivePassRatio && (\n          <VictoryLine\n            key=\"Window Pass Ratio Line\"\n            style={{ data: { stroke: colors.passRatio } }}\n            data={passRatio}\n            x={\"time\"}\n            y={(datum) => datum.value / maxPassRatio}\n          />\n        )}\n      </VictoryChart>\n    </>\n  );\n};\n\nexport default WindowChart;\n","export default __webpack_public_path__ + \"static/media/refresh.0abd27e1.svg\";","import {\n  // VictoryBar,\n  VictoryChart,\n  VictoryAxis,\n  VictoryTheme,\n  VictoryLine,\n  VictoryBrushContainer,\n  VictoryZoomContainer,\n  createContainer,\n  VictoryTooltip,\n  VictoryLegend,\n  VictoryLabel,\n  VictoryScatter,\n} from \"victory\";\nimport Legend from \"./Legend\";\nimport MainChart from \"./MainChart\";\nimport WindowChart from \"./WindowChart\";\nimport { useState } from \"react\";\nimport logo from \"../logos/svgs/refresh.svg\";\n\n// {responseTime, concurrentUsers, transactionRate, passRatio }\nconst ChartContainer = ({\n  responseTime,\n  concurrentUsers,\n  transactionRate,\n  passRatio,\n  refreshDataHandler,\n}) => {\n  const [\n    maxResponseTime,\n    maxConcurrentUsers,\n    maxTransactionRate,\n    maxPassRatio,\n  ] = [responseTime, concurrentUsers, transactionRate, passRatio].map(\n    (dataset) => {\n      return Math.max(...dataset.map((datum) => datum.value));\n    }\n  );\n\n  const [startTime, endTime] = [\n    responseTime[0].time,\n    responseTime[responseTime.length - 1].time,\n  ];\n  const [zoomDomain, setZoomDomain] = useState({\n    x: [startTime - 15000, endTime + 15000],\n    y: [0, 1.1],\n  });\n\n  const [active, setActive] = useState({\n    isActiveResponseTime: true,\n    isActiveConcurrentUsers: true,\n    isActiveTransactionRate: true,\n    isActivePassRatio: true,\n  });\n\n  const legendColors = {\n    responseTime: \"bg-indigo\",\n    concurrentUsers: \"bg-mediumPurple\",\n    transactionRate: \"bg-cornFlowerBlue\",\n    passRatio: \"bg-monsoonPink\",\n  };\n\n  const chartColors = {\n    responseTime: \"#1D0D5C\",\n    concurrentUsers: \"#916cbf\",\n    transactionRate: \"#649CD9\",\n    passRatio: \"#CC6ACC\",\n  };\n\n  return (\n    <div className=\"w-full rounded-lg flex-shrink-0 flex-grow\">\n      <div className=\"flex justify-center\">\n        <div className=\"w-full flex flex-col  mt-2\">\n          <div className=\"pl-24 pr-24 flex\">\n            <div className=\"absoluteSS inline-block\">\n              <button\n                className=\"h-10 min-w-min border rounded-lg\"\n                onClick={refreshDataHandler}\n              >\n                <img\n                  className=\"h-full w-full mx-auto\"\n                  src={logo}\n                  alt=\"refresh icon\"\n                />\n              </button>\n            </div>\n            <Legend\n              active={active}\n              setActive={setActive}\n              activeColors={legendColors}\n            />\n          </div>\n          <MainChart\n            responseTime={responseTime}\n            maxResponseTime={maxResponseTime}\n            concurrentUsers={concurrentUsers}\n            maxConcurrentUsers={maxConcurrentUsers}\n            transactionRate={transactionRate}\n            maxTransactionRate={maxTransactionRate}\n            passRatio={passRatio}\n            maxPassRatio={maxPassRatio}\n            zoomDomain={zoomDomain}\n            setZoomDomain={setZoomDomain}\n            active={active}\n            colors={chartColors}\n          />\n          <WindowChart\n            responseTime={responseTime}\n            maxResponseTime={maxResponseTime}\n            concurrentUsers={concurrentUsers}\n            maxConcurrentUsers={maxConcurrentUsers}\n            transactionRate={transactionRate}\n            maxTransactionRate={maxTransactionRate}\n            passRatio={passRatio}\n            maxPassRatio={maxPassRatio}\n            zoomDomain={zoomDomain}\n            setZoomDomain={setZoomDomain}\n            active={active}\n            colors={chartColors}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChartContainer;\n","const StatisticRow = (props) => {\n  return (\n    <div className=\"flex flex-grow items-center justify-center mt-0 pt-0 pb-0 border-t-0 px-6 align-middle border-l-0 text-lg border-r-0 whitespace-nowrap p-4 text-left text-blueGray-700 font-openSans\">\n      {props.metricName}: {props.metricValue} {props.metricUnit}\n    </div>\n  );\n};\n\nexport default StatisticRow;\n","import StatisticRow from \"./StatisticRow\";\n\nconst Statistics = ({ responseTime }) => {\n  const p95 = Math.round(responseTime[\"95th Percentile\"]);\n  const average = Math.round(responseTime[\"Average\"]);\n  const min = Math.round(responseTime[\"Min\"]);\n  const max = Math.round(responseTime[\"Max\"]);\n\n  return (\n    <div className=\"w-full rounded-lg flex-shrink-0 flex-grow mb-0  pt-8 pl-24 pr-24\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://demos.creative-tim.com/notus-js/assets/styles/tailwind.css\"\n      />\n      <link\n        rel=\"stylesheet\"\n        href=\"https://demos.creative-tim.com/notus-js/assets/vendor/@fortawesome/fontawesome-free/css/all.min.css\"\n      />\n\n      <section>\n        <div>\n          <div className=\"relative flex flex-col min-w-0 break-words bg-white w-full shadow-lg rounded \">\n            <div className=\"block w-full overflow-x-auto\">\n              <div className=\"items-center bg-transparent w-full border-collapse\">\n                <div className=\"\">\n                  <div>\n                    <p className=\" text-xl px-6 bg-blueGray-50 text-black align-middle border border-solid border-blueGray-100 text-s border-l-0 border-r-0 whitespace-nowrap font-raleway font-bold text-center\">\n                      Response Time Metrics\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-evenly\">\n                  <StatisticRow\n                    metricName=\"95th Percentile\"\n                    metricValue={p95}\n                    metricUnit=\"ms\"\n                  />\n                  <StatisticRow\n                    metricName=\"Average\"\n                    metricValue={average}\n                    metricUnit=\"ms\"\n                  />\n                  <StatisticRow\n                    metricName=\"Min\"\n                    metricValue={min}\n                    metricUnit=\"ms\"\n                  />\n                  <StatisticRow\n                    metricName=\"Max\"\n                    metricValue={max}\n                    metricUnit=\"ms\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Statistics;\n","const StepButton = ({ stepName, clickHandler, index, lastStepIdx }) => {\n  let borderRight = index === lastStepIdx ? \"\" : \"border-r-2\";\n  return (\n    <button\n      className={`h-10 w-15 flex flex-1 items-center justify-center border-b-2 ${borderRight}  border-mediumPurple bg-indigo focus:outline-none cursor-pointer ${\n        index === 0 ? \"active\" : \"\"\n      }`}\n      onClick={clickHandler}\n    >\n      <p className=\"text-center text-xl text-monsoonWhite font-raleway\">\n        {stepName}\n      </p>\n    </button>\n  );\n};\n\nexport default StepButton;\n","import ChartContainer from \"./ChartContainer\";\nimport Statistics from \"./Statistics\";\nimport StepButton from \"./StepButton\";\nimport { useParams } from \"react-router\";\nimport apiClient from \"../lib/ApiClient\";\nimport { useState, useEffect } from \"react\";\n\nconst formatData = (rawData) => {\n  const data = { ...rawData };\n  // const timeOrigin = new Date(Object.values(Object.values(data)[0])[0][0].time);\n  // const timeOrigin = 0;\n  Object.values(data).forEach((step) => {\n    Object.values(step).forEach((metric) => {\n      metric.forEach((datum) => {\n        // const miliseconds = new Date(datum.time) - timeOrigin;\n        const offset = new Date(datum.time).getTimezoneOffset() * 60 * 1000;\n        datum.time = new Date(datum.time) - offset;\n      });\n    });\n  });\n  return data;\n};\n\nconst TestPage = () => {\n  const tableName = useParams().tableName;\n  // const emptyMetric = [{ time: \"\", metric: \"\", unit: \"\", value: \"\" }];\n\n  const [allSteps, setAllSteps] = useState([]);\n  const [allStats, setAllStats] = useState({});\n  const [allData, setAllData] = useState({});\n  const [currentStep, setCurrentStep] = useState(\"\");\n  const [currentStats, setCurrentStats] = useState({});\n  const [currentData, setCurrentData] = useState({});\n\n  const refreshDataHandler = (e) => {\n    e.preventDefault();\n    const stepsPromise = apiClient.getListOfSteps(tableName);\n    const statsPromise = apiClient.getTestStats(tableName);\n    const datasetPromise = apiClient.getTestDataset(tableName);\n    Promise.all([stepsPromise, statsPromise, datasetPromise]).then((data) => {\n      setAllSteps(data[0]);\n      setAllStats(data[1]);\n      setAllData(formatData(data[2]));\n      return data;\n    });\n  };\n\n  useEffect(() => {\n    const stepsPromise = apiClient.getListOfSteps(tableName);\n    const statsPromise = apiClient.getTestStats(tableName);\n    const datasetPromise = apiClient.getTestDataset(tableName);\n    Promise.all([stepsPromise, statsPromise, datasetPromise])\n      .then((data) => {\n        setAllSteps(data[0]);\n        setAllStats(data[1]);\n        setAllData(formatData(data[2]));\n        return data;\n      })\n      .then((data) => {\n        const steps = data[0];\n        const step1 = steps[0];\n        setCurrentStep(step1);\n      });\n  }, [setAllSteps, setAllStats, setAllData, setCurrentStep, tableName]);\n\n  useEffect(() => {\n    setCurrentStats(allStats[currentStep] || {});\n    setCurrentData(allData[currentStep] || {});\n  }, [currentStep, allStats, allData, setCurrentStats, setCurrentData]);\n\n  const clickHandler = (e) => {\n    e.preventDefault();\n    const button = e.target.closest(\"button\");\n    const children = button.closest(\"header\").childNodes;\n    children.forEach((child) => {\n      if (child.classList.contains(\"active\")) {\n        child.classList.remove(\"active\");\n      }\n    });\n    button.classList.add(\"active\");\n    setCurrentStep(e.target.textContent);\n  };\n\n  return (\n    <div className=\"w-full bg-white relative flex overflow-hidden border-2 rounded-lg border-mediumPurple\">\n      <div className=\"w-full h-full flex flex-col justify-between\">\n        {/* <!-- Header --> */}\n        <header className=\"w-full flex items-center relative justify-between px-0  pl-0 pr-0 bg-monsoonWhite\">\n          {/* <!-- Profile --> */}\n          {allSteps.map((stepName, index) => (\n            <StepButton\n              key={stepName}\n              stepName={stepName}\n              clickHandler={clickHandler}\n              data-key={stepName}\n              index={index}\n              lastStepIdx={allSteps.length - 1}\n            />\n          ))}\n        </header>\n\n        {/* <!-- Main --> */}\n        <main className=\"max-w-full h-full flex relative overflow-y-hidden p-0\">\n          {/* <!-- Container --> */}\n          <div className=\"h-full w-full m-auto rounded-tl p-0\">\n            {/* <!-- Container --> */}\n            {JSON.stringify(currentStats) !== \"{}\" && (\n              <Statistics {...currentStats} />\n            )}\n            {JSON.stringify(currentData) !== \"{}\" && (\n              <ChartContainer\n                refreshDataHandler={refreshDataHandler}\n                {...currentData}\n              />\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\nexport default TestPage;\n","export default __webpack_public_path__ + \"static/media/logo.46edeb6c.svg\";","import logo from \"../logos/svgs/color/logo.svg\";\n\nconst Header = () => {\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <nav className=\"px-4 flex justify-center bg-indigo h-48 text-3xl relative\">\n        {/* <!-- top bar left --> */}\n        <ul className=\"flex items-center absolute bottom-0 left-0\">\n          {/* <!-- add button --> */}\n          <li className=\"\">\n            <img\n              className=\"h-64 w-full cropped overflow-hidden\"\n              src={logo}\n              alt=\"the monsoon logo\"\n            />\n          </li>\n        </ul>\n\n        <ul className=\"flex items-center\">\n          {/* <!-- add button --> */}\n          <li>\n            <h1 className=\"pl-8 lg:pl-0 text-monsoonWhite font-raleway text-6xl\">\n              Weather Channel\n            </h1>\n          </li>\n        </ul>\n\n        {/* <!-- to bar right  --> */}\n        <ul className=\"flex items-center\"></ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default Header;\n","import \"./App.css\";\nimport ListTestTable from \"./components/ListTestTable\";\nimport TestPage from \"./components/TestPage\";\nimport Header from \"./components/Header\";\nimport { Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"w-auto m-10 mt-0\">\n      <Header />\n      <Routes>\n        <Route path=\"/\">\n          <Route index element={<ListTestTable />} />\n          <Route path=\"tests\">\n            <Route path=\":tableName\" element={<TestPage />} />\n          </Route>\n        </Route>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}