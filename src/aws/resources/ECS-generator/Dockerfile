# specify base image (image to start from)
FROM node

# execute a Linux command in the container (e.g. create /home/app inside the container)
RUN mkdir -p /home/app

# Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)
# Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer
# installs, work.
RUN apt-get update \
    && apt-get install -y wget gnupg \
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update \
    && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \
      --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

# set default dir so that next commands executes in /home/app dir
WORKDIR /home/app

# copy current files from the host to a container's folder
COPY . .

# will execute npm install in /home/app because of WORKDIR
RUN npm install

RUN npm i puppeteer \
    # Add user so we don't need --no-sandbox.
    # same layer as npm install to keep re-chowned files from using up several hundred MBs more space
    && groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \
    && mkdir -p /home/pptruser/Downloads \
    && chown -R pptruser:pptruser /home/pptruser \
    && chown -R pptruser:pptruser /node_modules \
    && chown -R pptruser:pptruser /package.json \
    && chown -R pptruser:pptruser /package-lock.json

# Run everything after as non-privileged user.
USER pptruser

# executes an entrypoint linux command (e.g start the app with "node server.js")
# no need for /home/app/server.js because of WORKDIR
# CMD [executable, param1]
# CMD ["node", "coordinator.js"]
# CMD ["google-chrome-stable"]
# docker build -t imageName:tagName DockerfilePath
# docker build -t my-app:1.0 .